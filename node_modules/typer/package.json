{
  "name": "typer",
  "version": "1.0.0",
  "description": "Simple type casting library",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/mocha/bin/mocha -b"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SpoonX/typer.git"
  },
  "devDependencies": {
    "chai": "^1.1.2",
    "mocha": "^1.21.4"
  },
  "keywords": [
    "type",
    "casting"
  ],
  "author": {
    "name": "RWOverdijk"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/SpoonX/typer/issues"
  },
  "homepage": "https://github.com/SpoonX/typer#readme",
  "readme": "# Typer\nA small module that allows you to do simple type casting and detecting.\n\n## Installation\n`npm i --save typer`\n\n## Usage\nUsage is pretty simple. First, require typer and then use one of the documented methods.\n\n### .detect(value)\nDetect the type of `value`.\n\n```javascript\nvar typer = require('typer');\n\nconsole.log(typer.detect('12345.12')); // float\nconsole.log(typer.detect('12345')); // integer\nconsole.log(typer.detect('false')); // boolean\n```\n\nYou can find more examples in the tests.\n\n### .cast(value, type='smart')\nCast `value` to `type`.\n\n```javascript\nvar typer = require('typer');\n\nconsole.log(typer.cast(23, 'string')); // '23'\nconsole.log(typer.cast('23', 'integer')); // 23\nconsole.log(typer.cast('23', 'float')); // 23.00\n",
  "readmeFilename": "README.md",
  "_id": "typer@1.0.0",
  "dist": {
    "shasum": "522add3c638044da4880b51937429c63cf956e8f"
  },
  "_from": "typer@",
  "_resolved": "https://registry.npmjs.org/typer/-/typer-1.0.0.tgz"
}
